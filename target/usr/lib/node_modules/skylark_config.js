(function (fs, net, x2js, child_process, onddclient, telemetry, passwd) {

  var conf_file= '/etc/skylark_config.json';
  var confd= '/etc/skylark/conf.d/';
  var conf_file_writeable_path= '/mnt/conf/etc/';
  var conf_file_writeable= conf_file_writeable_path + 'skylark_config.json';

  var resolve = function(obj, path) {
    return path.split('.').reduce(function(prev, curr) {
      return prev ? prev[curr] : undefined;
    }, obj);
  };

  var resolve_set = function(obj, path, value) {
    var parent = path.split('.').slice(0,-1).reduce(function(prev, curr) {
      return prev ? prev[curr] : undefined;
    }, obj);
    parent[path.split(".").slice(-1)] = value;
    return obj;
  };

  module.exports.getConf = function (name,cb) {
    fs.readFile(conf_file, function(error, data) {
      if(error)
        cb(null);
      else {
        data_j = JSON.parse(data.toString());
        fs.readdir(confd, function(error, files) {
          if(error)
            cb(null);
          else {
            files.forEach( function (f) {
                var f_j = JSON.parse(fs.readFileSync(confd + f).toString());
                Object.keys(f_j).forEach(function(k) {
                    resolve_set(data_j, k, f_j[k]);
                });
            });
            fs.readFile(conf_file_writeable, function(error, data) {
              data_j_all = data_j;
              if (!error) {
                data_j_writeable = JSON.parse(data.toString());
                data_j_all.overRides.forEach( function(k) {
                  resolve_set(data_j_all, k, resolve(data_j_writeable, k));
                });
              }
              if (name) {
                var value = resolve(data_j_all, name);
                cb(value);
              } else {
                cb(data_j_all);
              }
            });
          }
        });
      }
    });
  };

  module.exports.setConf = function (name,value, cb) {
    module.exports.getConf(null, function (data_j) {
       if(!data_j) {
         data_j = {};
       }
       resolve_set(data_j,name, value);
       if (!fs.existsSync(conf_file_writeable_path)) {
         fs.mkdirSync(conf_file_writeable_path);
       }
       fs.writeFile(conf_file_writeable, JSON.stringify(data_j, null, '\t'), cb);
    });
  };

  var run_cmd = function (cmd, args, callBack ) {
    var spawn = child_process.spawn;
    var child = spawn(cmd, args);
    var resp = "";

    child.stdout.on('data', function (buffer) { resp += buffer.toString(); });
    child.stdout.on('end', function() { callBack (resp); });
  };

  module.exports.runTask = function(args, callback) {
    module.exports.getConf("cmds." + args, function (cmd) {
      run_cmd(cmd.cmd,cmd.args , function(r) {
        callback(r);
      });
    });
  };

  module.exports.getTunerConf = function(callback) {
    module.exports.getConf("tunerConf",function (r) {
        callback(r);
    });
  };

  module.exports.setTunerConf = function(args, callback) {
    module.exports.setConf("tunerConf", args, function(r) {
            module.exports.runTask("tunerRestart", callback);
    });
  };

  module.exports.getOnddStatus = function(callback) {
    module.exports.getConf("ondd",function (onddConf) {
      net.createConnection(onddConf.controlSocket)
      .setEncoding('utf8')
      .on('data', function(status) {
          var x = new x2js();
          callback(x.xml2js(status));
      })
      .write(onddConf.statusQuery);
    });
  };

  module.exports.getOnddTransfers = function(callback) {
    module.exports.getConf("ondd",function (onddConf) {
      net.createConnection(onddConf.controlSocket)
      .setEncoding('utf8')
      .on('data', function(transfers) {
          var x = new x2js();
          callback(x.xml2js(transfers));
      })
      .write(onddConf.transfersQuery);
    });
  };

  module.exports.getOnddClient = function(callback) {
    module.exports.getConf("ondd", function(onddConf) {
        ondd_client = new onddclient.listener(onddConf.statusSocket);
        callback(ondd_client);
    });
  };

  module.exports.getTelemetryClient = function(callback) {
    module.exports.getConf("telemetry", function(telemetryConf) {
        telemetry_client = new telemetry.client(telemetryConf);
        callback(telemetry_client);
    });
  };

  module.exports.getNetConf = function(callback) {
    module.exports.getConf("netConf",function (r) {
        callback(r);
    });
  };

  module.exports.setNetConf = function(args, callback) {
    var OuternetPassword = args.OuternetPassword;
    delete args.OuternetPassword;
    if (OuternetPassword) {
        passwd.changePassNV("outernet",OuternetPassword, function(e,r) {
            module.exports.setConf("netConf", args, function(r) {
                module.exports.runTask("configureWifi", callback);
            });
        });
    } else {
        module.exports.setConf("netConf", args, function(r) {
            module.exports.runTask("configureWifi", callback);
        });
    }
  };

})(require('fs'),
require('net'),
require('x2js'),
require('child_process'),
require('onddclient'),
require('telemetry'),
require('passwd-linux')
);
